//how many times a type T appears in a pack A
//advanced metaprogramming

#include <iostream>
#include <vector>

template<typename T, typename... A>
struct count;

template<typename T, typename... A>
struct count<T, T, A...>{
    static const int value = 1 + count<T, A...>::value;
};

template<typename T, typename T2, typename ...A>
struct count<T, T2, A...> : count<T, A...>
{};

template<typename T>
struct count<T>: std::integral_constant<int, 0>
{};

template<typename T, typename ...A>
int assert(){
    static_assert(count<T, A...>::value <= 6, "error");
    std::cout << count<T, A...>::value << " ";
    return 0;
}

template<typename ...N>
void expand_all(N...) {}

template<typename ...A>
void no_duplicates(A... a){
    expand_all(assert<A, A...>()...); //double expansion
}

int main() {
    //std::cout << count<int, int, int>::value << '\n';
    no_duplicates<double>(1,2,3,4,5,6); // 5 5 5 5 5 1
    std::cout << '\n';
    no_duplicates<int>(1,2,3,4,5,6); // 6 6 6 6 6 6
    return 0;
}
